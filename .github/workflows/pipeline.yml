name: CI/CD for nodejs-hello-world app

on:
  push:
    branches:
      - main

jobs:
  build-scan-deploy:
    runs-on: self-hosted

    steps:
      # Checkout  
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Set up Node.js
      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Install Dependencies
      - name: Install Dependencies
        run: npm install
      
      # Remove Existing Docker Container
      - name: Remove Existing Docker Container
        run: |
          container_id=$(docker ps -q --filter "ancestor=meetpatel1111/nodejs-hello-world:latest")
          if [ -n "$container_id" ]; then
            echo "Stopping and removing running container: $container_id"
            docker rm -f $container_id
          else
            echo "No running container found for the image."
          fi

      # Remove Existing Docker Image
      - name: Remove Existing Docker Image
        shell: pwsh
        run: |
          $imageId = docker images -q meetpatel1111/nodejs-hello-world:latest
          if ($imageId) {
            docker rmi -f $imageId
          }

      # Build Docker Image
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/nodejs-hello-world:latest .

      # Log in to DockerHub
      - name: Log in to Dockerhub
        uses: docker/login-action@v3.3.0
        with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
            logout: false
        timeout-minutes: 5
        
      # Push Docker Image
      - name: Push Docker Image
        run: docker push meetpatel1111/nodejs-hello-world:latest
      
      # Ensure SonarQube Container is Running
      - name: Ensure SonarQube Container is Running
        run: |
          container_id=$(docker ps -q --filter "name=sonarqube")
          if [ -z "$container_id" ]; then
            echo "SonarQube container is not running."
            echo "Checking if SonarQube container exists..."
            existing_container=$(docker ps -a -q --filter "name=sonarqube")
            if [ -n "$existing_container" ]; then
              echo "SonarQube container exists but is stopped. Starting it..."
              docker start sonarqube
            else
              echo "SonarQube container does not exist. Creating and starting a new container..."
              docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube:lts
            fi
          else
            echo "SonarQube container is already running."
          fi

      # Run SonarQube Scan
      - name: Run SonarQube Scan
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-windows-x64.zip" -OutFile "sonar-scanner.zip"
          Expand-Archive -Path "sonar-scanner.zip" -DestinationPath ".\sonar-scanner"
          $env:PATH += ";$PWD\sonar-scanner\bin"
          sonar-scanner `
            -D"sonar.projectKey=nodejs-hello-world" `
            -D"sonar.sources=." `
            -D"sonar.host.url=$env:SONAR_HOST_URL" `
            -D"sonar.login=$env:SONAR_TOKEN" `
            -D"sonar.scanner.socketTimeout=120"
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # SonarQube Quality Gate status
      - name: SonarQube Quality Gate
        shell: pwsh
        run: |
          $projectKey = "nodejs-hello-world"
          $sonarUrl = "$env:SONAR_HOST_URL/api/qualitygates/project_status?projectKey=$projectKey"
          $response = Invoke-RestMethod -Uri $sonarUrl -Headers @{ "Authorization" = "Bearer $env:SONAR_TOKEN" }
          
          if ($response.projectStatus.status -ne "OK") {
            Write-Error "SonarQube Quality Gate failed. Status: $($response.projectStatus.status)"
            exit 1
          } else {
            Write-Output "SonarQube Quality Gate passed."
          }
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
      # Deploy nodejs-hello-world app
      - name: Deploy nodejs-hello-world-app
        run: docker run -d -p 8080:80 --name nodejs-hello-world meetpatel1111/nodejs-hello-world:latest
